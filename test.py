from windowToMatrix import *
from solve import *

test1 = [[0, 0, 9, 0, 16, 2, 7, 0, 22, 9, 17, 0, 16, 0, 23, 0, 25, 28, 9], 
        [0, 0, 3, 0, 0, 0, 19, 0, 0, 0, 12, 0, 13, 0, 12, 0, 24, 0, 0], 
        [0, 0, 10, 0, 11, 17, 18, 0, 15, 25, 21, 0, 27, 19, 27, 0, 27, 28, 6], 
        [0, 0, 11, 0, 16, 0, 0, 0, 0, 0, 3, 0, 0, 0, 25, 0, 0, 0, 20], 
        [0, 0, 12, 0, 17, 18, 20, 0, 15, 20, 5, 0, 0, 0, 19, 0, 2, 11, 14], 
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
        [1, 6, 13, 0, 6, 10, 8, 0, 22, 19, 24, 0, 15, 28, 1, 0, 18, 9, 24], 
        [2, 0, 0, 0, 14, 0, 21, 0, 10, 0, 26, 0, 28, 0, 8, 0, 1, 0, 25], 
        [3, 7, 7, 0, 0, 0, 3, 0, 23, 4, 20, 0, 14, 22, 27, 0, 26, 0, 1], 
        [4, 0, 14, 0, 0, 0, 21, 0, 24, 0, 6, 0, 0, 0, 18, 0, 17, 0, 12], 
        [5, 8, 15, 0, 0, 0, 22, 0, 5, 5, 7, 0, 21, 8, 11, 0, 16, 2, 10]]

test2 = [[0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 25, 9, 0, 0, 0, 0, 0, 0, 0], 
        [0, 3, 9, 15, 17, 11, 21, 23, 17, 0, 4, 22, 0, 0, 10, 1, 25, 21, 16], 
        [0, 2, 10, 5, 18, 0, 0, 0, 1, 0, 13, 0, 0, 0, 20, 17, 19, 0, 0], 
        [0, 4, 5, 0, 0, 0, 0, 8, 18, 24, 0, 0, 0, 23, 15, 25, 0, 0, 26], 
        [0, 5, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 7, 0, 0, 25, 5], 
        [0, 6, 12, 0, 0, 19, 22, 17, 14, 22, 1, 0, 24, 12, 0, 0, 4, 8, 0], 
        [0, 7, 13, 0, 0, 0, 0, 0, 0, 0, 19, 0, 26, 12, 0, 15, 4, 20, 20], 
        [0, 0, 13, 0, 0, 0, 11, 0, 0, 0, 15, 0, 0, 0, 0, 18, 0, 9, 0], 
        [0, 0, 0, 0, 13, 20, 23, 0, 0, 0, 12, 2, 16, 0, 0, 2, 14, 14, 11], 
        [0, 0, 14, 16, 9, 18, 8, 3, 3, 0, 0, 16, 24, 3, 0, 0, 0, 0, 10], 
        [1, 8, 10, 0, 0, 0, 0, 0, 22, 0, 0, 6, 19, 0, 0, 0, 0, 0, 23]]

test3 = [[0, 0, 0, 0, 0, 0, 0, 0, 3, 20, 0, 0, 11, 0, 0, 0, 0, 0, 0], 
        [0, 0, 7, 12, 3, 15, 19, 12, 0, 20, 17, 0, 7, 21, 21, 6, 13, 0, 0], 
        [0, 1, 0, 13, 16, 0, 0, 0, 15, 18, 19, 0, 2, 0, 12, 0, 1, 17, 0], 
        [0, 2, 8, 13, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 14, 17, 1, 16, 0], 
        [0, 3, 0, 14, 9, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 11, 2, 0], 
        [0, 4, 9, 0, 10, 0, 0, 0, 0, 0, 0, 0, 15, 20, 20, 0, 0, 18, 0], 
        [0, 5, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 14, 0], 
        [0, 5, 10, 11, 0, 0, 10, 0, 8, 0, 0, 0, 14, 0, 0, 0, 2, 18, 0], 
        [0, 6, 11, 0, 17, 18, 4, 0, 12, 0, 0, 9, 0, 19, 4, 0, 16, 6, 0], 
        [0, 0, 8, 10, 7, 16, 7, 0, 6, 3, 21, 9, 0, 0, 0, 0, 13, 0, 0], 
        [0, 0, 0, 0, 0, 0, 0, 8, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

test4 = [[0, 6, 9, 12, 0, 0, 0, 19, 20, 19, 0, 0, 0, 20, 0, 0, 0, 16, 23], 
        [1, 0, 0, 0, 15, 0, 4, 0, 0, 0, 22, 0, 0, 1, 0, 0, 19, 16, 0], 
        [2, 0, 0, 0, 16, 0, 8, 0, 0, 0, 9, 0, 0, 15, 0, 10, 12, 0, 0], 
        [3, 0, 0, 13, 4, 0, 8, 0, 0, 2, 11, 0, 0, 15, 22, 9, 0, 0, 0], 
        [0, 7, 10, 13, 17, 0, 0, 6, 18, 17, 21, 0, 0, 5, 4, 7, 1, 11, 20], 
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
        [0, 7, 5, 0, 0, 0, 6, 7, 0, 0, 0, 23, 3, 0, 0, 0, 0, 18, 0], 
        [4, 0, 0, 14, 0, 18, 0, 0, 21, 0, 15, 0, 0, 22, 0, 0, 1, 19, 0], 
        [0, 0, 11, 0, 0, 9, 0, 0, 8, 0, 21, 0, 0, 12, 0, 14, 0, 17, 0], 
        [0, 2, 0, 0, 0, 3, 0, 0, 22, 0, 6, 0, 0, 13, 0, 3, 18, 17, 13], 
        [5, 8, 2, 11, 0, 0, 5, 12, 0, 0, 0, 20, 16, 0, 0, 0, 0, 21, 0]]

test5 = [[0, 0, 8, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 24, 0, 0, 0, 12], 
        [0, 5, 9, 4, 0, 0, 0, 20, 21, 25, 0, 0, 0, 17, 11, 10, 0, 0, 26], 
        [1, 6, 5, 13, 17, 0, 18, 21, 23, 2, 26, 0, 4, 9, 20, 10, 3, 0, 8], 
        [2, 5, 5, 14, 16, 0, 19, 22, 20, 11, 24, 0, 22, 24, 4, 25, 19, 0, 18], 
        [0, 6, 2, 13, 0, 0, 0, 14, 7, 13, 0, 0, 0, 22, 12, 19, 0, 0, 19], 
        [0, 0, 10, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 15, 0, 0, 0, 23], 
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], 
        [0, 1, 11, 0, 0, 0, 17, 8, 0, 0, 11, 20, 7, 16, 0, 26, 1, 21, 21], 
        [3, 0, 0, 15, 0, 1, 0, 0, 23, 0, 0, 0, 0, 23, 0, 0, 8, 26, 3], 
        [4, 0, 0, 16, 0, 13, 0, 0, 6, 0, 0, 0, 17, 0, 0, 0, 0, 10, 6], 
        [0, 7, 12, 0, 0, 0, 2, 16, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 22]]

def test_window_to_matrix():
    img = []
    for i in range(1, 6):
        all_square = process_screenshot(cv2.imread(f"testing_img/test{i}.png"))
        types = getAllSquareTypes(all_square)
        array = pixelToMatrix(all_square, types)
        img.append(array)
    test = [test1, test2, test3, test4, test5]
    for i in range(5):
        assert (img == test, "Testing matrix and the given matrix are different. This might due to a different implementation of the algorithm.")
    print("Window To Matrix works!")

def test_solving_algorithm(order, test):
    assert (len(order) % 2 == 0, "Invalid length of order")
    for i in range(len(order)//2):
        assert (checkConnection(test, order[2*i], order[2*i + 1]), "Found two points that are not connectable")
        row1, col1 = order[2*i]
        row2, col2 = order[2*i + 1]
        test[row1][col1] = 0
        test[row2][col2] = 0
    print("Found order works")

if __name__ == '__main__':
    test_window_to_matrix()

    test = [test1, test2, test3, test4, test5]
    for i in range(5):
        order = solve(np.array(test[i]))
        test_solving_algorithm(order, np.array(test[i]))